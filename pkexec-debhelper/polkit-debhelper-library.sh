# Author:       M.Angel Juan <m.angel.juan@gmail.com>
# Description:  common polkit-debhelper functions
#
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
#

POLKIT_DEFS="/usr/share/polkit-debhelper/polkit-debhelper-definitions.sh"
[ -s "${POLKIT_DEFS}" ] || exit 1
. ${POLKIT_DEFS}

do_error(){
    echo "$@" >&2
    exit 1
}

debug(){
    [ "x$DH_VERBOSE" = "x1" ] && echo -e "$@"
    return 0
}
debugn(){
    [ "x$DH_VERBOSE" = "x1" ] && echo -e -n "$@"
    return 0
}

debian_test(){
    [ -d "debian" -a -f "debian/control" ]  && return 0
    do_error "oops! Are you really building a Debian package?"
}

read_list_pkg_generated(){
    REG_EXP="^Package:"
    [ -f "debian/control" ] && sed -ne "/${REG_EXP}/s%${REG_EXP}[[:space:]]*%%p" "debian/control"
}

read_source_name(){
    REG_EXP="^Source:"
    [ -f "debian/control" ] && sed -ne "/${REG_EXP}/s%${REG_EXP}[[:space:]]*%%p" "debian/control"
}

add_mant_script(){
    MANT_SCR="$1"
    shift
    COMMENT="$1"
    shift
    PKG_NAME="$1"
    shift
    SCR_FILE="debian/$PKG_NAME.$MANT_SCR.debhelper"
    echo "## automatically generated by $COMMENT (polkit-debhelper)" >> "$SCR_FILE"
    while [ "$1" ] ; do
        echo "$1" >> "$SCR_FILE"
        shift
    done
}

add_var(){
    VARNAME="$1"
    shift
    PKG_NAME="$1"
    shift
    VARVALUE="$1"
    echo "$VARNAME=$VARVALUE" >> "debian/${PKG_NAME}.substvars"
}

add_depends(){
    add_var "misc:Depends" "$@"
}

add_depends_polkit(){
    add_depends "$1" "policykit-1"
}

add_depends_xpkexec(){
    add_depends "$1" "xpkexec"
}

process_pkexec_file(){

	
	PKG=$1
	shift
	FILETOREAD=$1
	while read line; do
		if [ "$line" = "" ]; then
			DESTFOLDER="debian/${PKG}.polkit.action"
			mkdir -p $DESTFOLDER
			polkit_gen_action $CMD $PREFIX $PKG $ICON > "${DESTFOLDER}/${PREFIX}.${PKG}"
			if [ "$XREQUIRED" = "yes" ]; then
				add_depends_xpkexec $PKG
			fi
			unset CMD PREFIX ICON XREQUIRE
		else
			KEY=${line%%=*}
		        VAL=${line#*=}
		        case $KEY in
                		CMD|ICON|XREQUIRED|PREFIX)
		                        declare $KEY="$VAL"
                	        ;;
		        esac
		fi

	done < $FILETOREAD

	if [ "$CMD" != "" ]; then
		mkdir -p $DESTFOLDER
                polkit_gen_action $CMD $PREFIX $PKG $ICON > "${DESTFOLDER}/${PREFIX}.${PKG}"
                if [ "$XREQUIRED" = "yes" ]; then
                   add_depends_xpkexec $PKG
                fi
	fi
}


apply_polkit_debian_configs(){
    # read polkit configuration files when packaging binary install debfile
    # first parameter is a binary package name

    P="$1"
    FPATH="debian"
    EXT="polkit"

    # Check number of packages generated , if only one is generated both names are permitted else packagename.polkit is required
    # Example: packagefilename.polkit.action, packagefile.polkit.rule, polkit.action, polkit.rule 
    npkgs=$(read_list_pkg_generated|wc -l)
    SOURCENAME=read_source_name

    ###
    ## Find existing pkexec or packagename.pkexec file
    ###
    if [ "$SOURCENAME" = "$P" -a -e "debian/pkexec" ]; then
	    mv debian/pkexec debian/$P.pkexec
    fi
    PKEXECPATH=$(find ${FPATH} -name "${P}.pkexec")
    if [ -n "$PKEXECPATH" ];
	    process_pkexec_file $P $PKEXECPATH
    fi


    for typefile in "action" "rule"; do
        dname=""
	if [ "$SOURCENAME" = "$P" -a -d "${FPATH}/${EXT}.${typefile}" ]; then
		mv ${FPATH}/${EXT}.${typefile} ${FPATH}/$P.${EXT}.${typefile}
	fi
	
        if [ -d "${FPATH}/${P}.${EXT}.${typefile}" ]; then 
            dname="${FPATH}/${P}.${EXT}.${typefile}" 
        fi

	###
	## Install all actions and rules
	###
        if [ -n "${dname}" ]; then
            naction=0
            for filepolkit in $(ls "${dname}/"); do 
		debug "Copying polkit ${filepolkit} (${dname}/${filepolkit}) found on package ${P}!" 
		if [ "${typefile}" = "action" ]; then 
			mkdir -p "${FPATH}/${P}${POLKIT_PATH_ACTIONS}" 
			cp ${dname}/${filepolkit} ${FPATH}/${P}${POLKIT_PATH_ACTIONS}/${filepolkit}.${naction}.policy
		fi
                if [ "${typefile}" = "rule" ]; then
			mkdir -p "${FPATH}/${P}${POLKIT_PATH_RULES}" 
			cp ${dname}/${filepolkit} ${FPATH}/${P}${POLKIT_PATH_RULES}/${filepolkit}.${naction}.rules
		fi
                naction=$(($naction+1))
            done;
        fi
    done

    if [ -d "${FPATH}/${P}${POLKIT_PATH_ACTIONS}" -o -d "${FPATH}/${P}${POLKIT_PATH_RULES}" ] ; then
        add_depends_polkit "$P"
    fi
    return 0
}

polkit_gen_action(){
    APPPATH="$1"
    [ -n "$APPPATH" ] || exit 1
    PREFIX="$2"
    [ -n "$PREFIX" ] || PREFIX="id.generic.pkexec"
    NAMEACTION="$3"
    [ -n "$NAMEACTION" ] || NAMEACTION="genericnameaction"
    ICON="$4"
    [ -n "$ICON" ] || ICON="noicon"

    sed -e "s#@ACTION@#${PREFIX}.${NAMEACTION}#" -e "s#@ICONNAME@#${ICON}#" -e "s#@APP@#${APPPATH}#" ${POLKIT_SKEL_FILE} 
}
polkit_add_action(){
    APPPATH="$1"
    [ -n "$APPPATH" ] || exit 1
    ROOTPATH="$2"
    [ -n "$ROOTPATH" ] || exit 1
    DIR_DESTFILE=$ROOTPATH/${POLKIT_PATH_ACTIONS}
    [ -d "$DIR_DESTFILE" ] || mkdir -p $DIR_DESTFILE
    PREFIX="$3"
    [ -n "$PREFIX" ] || PREFIX="id.generic.pkexec"
    NAMEACTION="$4"
    [ -n "$NAMEACTION" ] || NAMEACTION="genericnameaction"
    ICON="$5"
    [ -n "$ICON" ] || ICON="noicon"

    FILENAME="$PREFIX.$NAMEACTION"
    [ ! -f "$FILENAME" ] || exit 1

    sed -e "s#@ACTION@#${PREFIX}.${NAMEACTION}#" -e "s#@ICONNAME@#${ICON}#" -e "s#@APP@#${APPPATH}#g" ${POLKIT_SKEL_FILE} > ${DIR_DESTFILE}/${FILENAME}
}
